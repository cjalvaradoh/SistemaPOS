@model IEnumerable<SistemaPOS.Models.Producto> 
@{
	ViewData["Title"] = "POS";
	Layout = "_LayoutLogged";
}

<div class="container my-4">
	<h1 class="text-center">Punto de Venta</h1>

	<div class="row">
		<div class="col-12 mb-3">
			<div class="input-group">
				<input type="text" class="form-control" placeholder="Buscar producto..." id="searchInput" />
				<button class="btn btn-primary" id="searchButton">
					<i class="bi bi-search"></i> Buscar
				</button>
			</div>
		</div>
	</div>

	<div class="row">
		<!-- Grilla de productos -->
		<div class="col-8">
			<h4>Productos</h4>
			<div class="row" id="grillaProductos">
				@foreach (var producto in Model)
				{
					<div class="col-4 mb-3 producto"
						 data-nombre="@producto.Nombre"
						 data-codigo="@producto.Codigo">
						<div class="card">
							<img src="@producto.thumbnail_url" class="card-img-top" style="max-height:200px" alt="@producto.Nombre">
							<div class="card-body">
								<h5 class="card-title">@producto.Nombre</h5>
								<p class="card-text">Q.@producto.Precio</p>
								<button class="btn btn-success w-100 add-to-cart"
										data-id="@producto.ProductoId"
										data-nombre="@producto.Nombre"
										data-precio="@producto.Precio">
									<i class="bi bi-cart-plus"></i> Agregar
								</button>
							</div>
						</div>
					</div>
				}
			</div>
		</div>

		<!-- Carrito -->
		<div class="col-4">
			<h4>Carrito</h4>
			<div class="list-group" id="cart">
			</div>
			<div class="mt-3">
				<h5>Total: <span id="total"></span> </h5>
				<button class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#finalizarCompra">
					<i class="bi bi-cash"></i> Finalizar Compra
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="finalizarCompra" tabindex="-1" aria-labelledby="finalizarCompraLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="finalizarCompraLabel">Finalizar Compra</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<form id="formularioFinalizar Compra">
					<div class="mb-3">
						<label for="cliente" class="form-label">Seleccione al Cliente</label>
						<select class="form-select" id="cliente" name="cliente" required>
							<option value="">Seleccione ...</option>
							@foreach (var cliente in ViewBag.Clientes as List<SistemaPOS.Models.Cliente>)
							{
								<option value="@cliente.ClienteId">@cliente.Nombre</option>
							}
						</select>
					</div>
					<div class="mb-3">
						<label for="empleado" class="form-label">Seleccione al Empleado</label>
						<select class="form-select" id="empleado" name="empleado" required>
							<option value="">Seleccione ...</option>
							@foreach (var empleado in ViewBag.Empleados as List<SistemaPOS.Models.Empleado>)
							{
								<option value="@empleado.EmpleadoId">@empleado.Nombre</option>
							}
						</select>
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
				<button type="button" class="btn btn-primary" id="botonFinalizarCompra">Finalizar</button>
			</div>
		</div>
	</div>
</div>

<script>
	// Capturar el botón y el campo de texto
	const searchInput = document.getElementById('searchInput');
	const searchButton = document.getElementById('searchButton');
	const productos = document.querySelectorAll('.producto'); 

	// Función para filtrar productos
	function filtrarProductos() {
		const searchTerm = searchInput.value.toLowerCase(); 

		productos.forEach(producto => {
			const nombre = producto.getAttribute('data-nombre').toLowerCase(); 
			const codigo = producto.getAttribute('data-codigo').toLowerCase(); 

			
			if (nombre.includes(searchTerm) || codigo.includes(searchTerm)) {
				producto.style.display = 'block'; 
			} else {
				producto.style.display = 'none'; 
			}
		});
	}

	// Agregar eventos al botón y al campo de texto
	searchButton.addEventListener('click', filtrarProductos); 
	// searchInput.addEventListener('input', filtrarProductos);  // Buscar mientras se escribe


	let carrito = [];
	const contenedorCarrito = document.getElementById('cart');
	const elementoTotal = document.getElementById('total');

	function actualizarCarrito() {
		contenedorCarrito.innerHTML = '';
		let total = 0;

		carrito.forEach((item) => {
			const nuevoElemento = document.createElement('div');
			nuevoElemento.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center')
			nuevoElemento.innerHTML = `
					${item.nombre}
					<span class="badge bg-primary rounded-pill">
						${item.cantidad} x Q.${item.precio.toFixed(2)} = Q.${(item.cantidad * item.precio).toFixed(2)}
					</span>
					<div>
						<button class="btn btn-sm btn-secondary decrement-item" data-id="${item.id}">
							<i class="bi bi-dash-circle"></i>
						</button>
							<button class="btn btn-sm btn-danger remove-item" data-id="${item.id}">
							<i class="bi bi-trash"></i>
						</button>
					</div>
				`
			contenedorCarrito.appendChild(nuevoElemento)
			total += item.cantidad * item.precio
		})

		elementoTotal.textContent = `Q.${total.toFixed(2)}`
	}

	document.getElementById('grillaProductos').addEventListener('click', function (e) {
		if (e.target.closest('.add-to-cart')) {
			const button = e.target.closest('.add-to-cart');
			const id = button.getAttribute('data-id');
			const nombre = button.getAttribute('data-nombre');
			const precio = parseFloat(button.getAttribute('data-precio'));

			const productoEnCarrito = carrito.find(item => item.id === id);

			if (productoEnCarrito) {
				productoEnCarrito.cantidad++;
			} else {
				carrito.push({ id, nombre, precio, cantidad: 1 });
			}

			actualizarCarrito();
		}
	});

	contenedorCarrito.addEventListener('click', function (e) {
		const target = e.target.closest('.btn');
		if (!target) return;

		const id = target.getAttribute('data-id');
		const item = carrito.find(item => item.id == id);

		if (target.classList.contains('remove-item')) {
			carrito = carrito.filter(item => item.id != id);
		} else if (target.classList.contains('decrement-item') && item) {
			item.cantidad--
			if (item.cantidad === 0) {
				carrito = carrito.filter(item => item.id != id);
			}
		}

		actualizarCarrito();
	});

	document.getElementById('botonFinalizarCompra').addEventListener('click', async () => {
		const clienteId = document.getElementById('cliente').value;
		const empleadoId = document.getElementById('empleado').value;  // Obtener el empleado seleccionado

		if (!clienteId) {
			alert('Seleccione un cliente');
			return;
		}

		if (!empleadoId) {
			alert('Seleccione un empleado');
			return;
		}

		const venta = {
			clienteId,
			empleadoId,  // Asegurarse de que se envíe el empleado seleccionado
			detalles: carrito.map(item => ({
				productoId: item.id,
				cantidad: item.cantidad,
				precioUnitario: item.precio
			}))
		};

		try {
			const response = await fetch('/Ventas/CrearVenta', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(venta)
			});

			if (response.ok) {
				const responseJson = await response.json();
				alert('Venta finalizada con éxito. Código de venta: ' + responseJson.ventaId);
				window.location.href = `/Ventas/ImprimirFactura/${responseJson.ventaId}`;
			} else {
				alert('Error al finalizar la compra.');
			}

		} catch (error) {
			console.log(error);
			alert('Error al finalizar la compra.');
		}
	});

</script>